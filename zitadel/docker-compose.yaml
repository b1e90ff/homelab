services:
  zitadel:
    restart: "always"
    networks:
      - "zitadel"
      - "proxy"
    image: "ghcr.io/zitadel/zitadel:stable"
    user: "${UID}:${GID}"  # Add user mapping here
    command: 'start-from-init --config /example-zitadel-config.yaml --config /example-zitadel-secrets.yaml --steps /example-zitadel-init-steps.yaml --masterkey "${ZITADEL_MASTERKEY}" --tlsMode external'
    depends_on:
      certs:
        condition: "service_completed_successfully"
    environment:
      ZITADEL_MASTERKEY: ${ZITADEL_MASTERKEY}
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME: ${ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME}
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD: ${ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD}
    volumes:
      - type: bind
        source: ./config.yaml
        target: /example-zitadel-config.yaml
        bind:
          create_host_path: true
      - type: bind
        source: ./secrets.yaml
        target: /example-zitadel-secrets.yaml
        bind:
          create_host_path: true
      - type: bind
        source: ./init-steps.yaml
        target: /example-zitadel-init-steps.yaml
        bind:
          create_host_path: true
      - type: bind
        source: ../data/zitadel/crdb-certs
        target: /crdb-certs
        bind:
          create_host_path: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zitadel.entrypoints=http"
      - "traefik.http.routers.zitadel.rule=Host(`auth.tat.systems`)"
      - "traefik.http.middlewares.zitadel-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.zitadel.middlewares=zitadel-https-redirect"
      - "traefik.http.routers.zitadel-secure.entrypoints=https"
      - "traefik.http.routers.zitadel-secure.rule=Host(`auth.tat.systems`)"
      - "traefik.http.routers.zitadel-secure.tls=true"
      - "traefik.http.routers.zitadel-secure.service=zitadel"
      - "traefik.http.services.zitadel.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.zitadel.loadbalancer.passHostHeader=true"
      - "traefik.http.services.zitadel.loadbalancer.server.port=8080"
      - "traefik.docker.network=proxy"

  certs:
    image: "cockroachdb/cockroach:latest"
    entrypoint: ["/bin/bash", "-c"]
    command:
      [
        "cp /certs/* /zitadel-certs/ && cockroach cert create-client --overwrite --certs-dir /zitadel-certs/ --ca-key /zitadel-certs/ca.key zitadel_user && chown 1000:1000 /zitadel-certs/*",
      ]
    volumes:
      - "certs:/certs:ro"
      - "zitadel-certs:/zitadel-certs:rw"
    depends_on:
      my-cockroach-db:
        condition: "service_healthy"

  my-cockroach-db:
    restart: "always"
    networks:
      - "zitadel"
    image: "cockroachdb/cockroach:latest"
    user: "${UID}:${GID}"  # Use the current user's UID and GID
    command: "start-single-node --advertise-addr my-cockroach-db --sql-addr my-cockroach-db:26257"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: "10s"
      timeout: "30s"
      retries: 5
      start_period: "20s"
    ports:
      - "9090:8080"  # Admin UI.
      - "26257:26257"  # SQL port
    volumes:
      - type: bind
        source: ../data/zitadel/crdb-certs
        target: /cockroach/certs
        bind:
          create_host_path: true
      - type: bind
        source: ../data/zitadel/crdb-data
        target: /cockroach/cockroach-data
        bind:
          create_host_path: true

networks:
  zitadel:
  proxy:
    external: true

volumes:
  certs:
  zitadel-certs:
  data: