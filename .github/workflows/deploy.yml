name: Deploy to Homelab

on:
  workflow_dispatch:
    inputs:
      confirm_deploy:
        description: 'Type "deploy" to confirm deployment'
        required: true
        type: string
      services:
        description: 'Services to deploy (all, or comma-separated list e.g.: postgres,zitadel)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    if: github.event.inputs.confirm_deploy == 'deploy'
    steps:
      - uses: actions/checkout@v3

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: $(cat ~/.ssh/known_hosts)
          if_key_exists: fail

      - name: Process services
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          # Service secrets
          CF_DNS_API_TOKEN: ${{ secrets.CF_DNS_API_TOKEN }}
          TRAEFIK_DASHBOARD_CREDENTIALS: ${{ secrets.TRAEFIK_DASHBOARD_CREDENTIALS }}
          ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
        run: |
          # Get services to process
          if [ "${{ github.event.inputs.services }}" = "all" ]; then
            # Only find directories that have a docker-compose.yml
            services=$(find . -maxdepth 2 -type f -name "docker-compose.yml" -exec dirname {} \; | sed 's|^\./||')
          else
            services="${{ github.event.inputs.services }}"
          fi

          # Process each service
          for service in ${services//,/ }; do
            echo "Processing $service"
            
            ssh $SSH_USER@$SSH_HOST "mkdir -p $DEPLOY_PATH/${service}"

            # Create .env file if service has secrets defined
            if yq eval ".services.${service}" secrets.yml > /dev/null 2>&1; then
              # Build env file content directly from environment variables
              env_content=""
              while read -r secret_name; do
                # Get value from environment variable
                secret_value=${!secret_name}
                if [ ! -z "$secret_value" ]; then
                  env_content+="${secret_name}='${secret_value}'"$'\n'
                fi
              done < <(yq eval ".services.${service}.secrets[]" secrets.yml)
              
              # Upload env content directly
              echo "$env_content" | ssh $SSH_USER@$SSH_HOST "cat > $DEPLOY_PATH/${service}/.env"
              echo "Created .env file for $service"
            else
              echo "No secrets defined for $service"
            fi

            # Upload and deploy service
            echo "Uploading $service"
            scp -r "${service}" $SSH_USER@$SSH_HOST:$DEPLOY_PATH/
            ssh $SSH_USER@$SSH_HOST "cd $DEPLOY_PATH/${service} && docker-compose pull && docker-compose up -d"
          done